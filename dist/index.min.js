"use strict";function __rest(e,t){var r={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&(r[a[n]]=e[a[n]])}return r}function createSubscription(e){let t=!1;return{isUnsubscribed:()=>t,unsubscribe:()=>{t||(e(),t=!0)}}}function createDataStream(e){return{subscribe:e,then:t=>new Promise(()=>{const r=e({next:e=>{t&&t(e),r.unsubscribe()}})})}}function getObjectKeys(e){return[...Object.keys(e),...Object.getOwnPropertyNames(Object.getPrototypeOf(e))]}function getCallbackName({moduleName:e,funcName:t,requestID:r}){return`${e}_${t}Callback${null!==r?`_${r}`:""}`}function isType(e,...t){const r=getObjectKeys(e);return!!e&&t.every(e=>r.indexOf(e)>=0)}function promisifyCallback(e,{callbackNameFunc:t,funcToWrap:r}){const a=t();return new Promise(t=>{e[a]=(r=>{t(r),delete e[a]}),r(a)()})}function streamCallback(e,{callbackNameFunc:t,funcToWrap:r}){return createDataStream(a=>{const n=t();let c;return e[n]=(e=>{if(isType(e,"status_code"))if(isType(e.result,"event"))switch(e.result.event){case exports.StreamEvent.STREAM_TERMINATED:c.unsubscribe()}else a&&a.next&&a.next(e)}),r(n)(),c=createSubscription(()=>{delete e[n],a&&a.complete&&a.complete()})})}function simplifyCallback(e,t){var{funcNameToWrap:r,isStream:a}=t,n=__rest(t,["funcNameToWrap","isStream"]);return a?streamCallback(e,n):promisifyCallback(e,n)}function wrapAndroidModule(e,t,r){const a=getObjectKeys(r).filter(e=>"function"==typeof r[e]).map(a=>{let n=0;const c=()=>{const e=`${n}`;return n+=1,getCallbackName({moduleName:t,requestID:e,funcName:a})};return{[a]:t=>simplifyCallback(e,{callbackNameFunc:c,funcNameToWrap:a,isStream:t.isStream,funcToWrap:e=>r[a].bind(r,JSON.stringify({callback:e,method:a,parameters:t}))})}}).reduce((e,t)=>Object.assign({},e,t),{});return{invoke:(e,t)=>a[e](t)}}function wrapIOSModule(e,t,r){const a={};return{invoke:(n,c)=>simplifyCallback(e,{funcNameToWrap:n,isStream:c.isStream,callbackNameFunc:()=>{const e=a[n]||0;return a[n]=e+1,getCallbackName({moduleName:t,requestID:e,funcName:n})},funcToWrap:e=>r.postMessage.bind(r,{callback:e,method:n,parameters:c})})}}function wrapModule(e,t){if(e[t]){const r=e[t],a=wrapAndroidModule(window,t,r);e[t]=a}else if(e.webkit&&e.webkit.messageHandlers&&e.webkit.messageHandlers[t]){const r=wrapIOSModule(e,t,e.webkit.messageHandlers[t]);e[t]=r}}Object.defineProperty(exports,"__esModule",{value:!0}),(exports.StreamEvent||(exports.StreamEvent={})).STREAM_TERMINATED="STREAM_TERMINATED",exports.wrapModule=wrapModule;